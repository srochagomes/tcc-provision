		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security.oauth.boot</groupId>
			<artifactId>spring-security-oauth2-autoconfigure</artifactId>
			<version>2.3.3.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-zuul</artifactId>
			<version>2.2.6.RELEASE</version>
		</dependency>


		<dependency>
			<groupId>org.springframework.security.oauth</groupId>
			<artifactId>spring-security-oauth2</artifactId>
			<version>2.3.3.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-jwt</artifactId>
			<version>1.0.9.RELEASE</version>
		</dependency>




@Configuration
@EnableResourceServer
@EnableConfigurationProperties(SecurityProperties.class)
public class ResourceServerConfiguration extends ResourceServerConfigurerAdapter {

    private static final String ROOT_PATTERN = "/**";

    private final SecurityProperties securityProperties;

    private TokenStore tokenStore;

    public ResourceServerConfiguration(final SecurityProperties securityProperties) {
        this.securityProperties = securityProperties;
    }

    @Override
    public void configure(final ResourceServerSecurityConfigurer resources) {
        resources.tokenStore(tokenStore());
    }

    @Override
    public void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
                .antMatchers("/oauth/**")
                .permitAll()
                .antMatchers(HttpMethod.GET, ROOT_PATTERN).access("#oauth2.hasScope('read')")
                .antMatchers(HttpMethod.POST, ROOT_PATTERN).access("#oauth2.hasScope('write')")
                .antMatchers(HttpMethod.PATCH, ROOT_PATTERN).access("#oauth2.hasScope('write')")
                .antMatchers(HttpMethod.PUT, ROOT_PATTERN).access("#oauth2.hasScope('write')")
                .antMatchers(HttpMethod.DELETE, ROOT_PATTERN).access("#oauth2.hasScope('write')");

    }

    @Bean
    public DefaultTokenServices tokenServices(final TokenStore tokenStore) {
        DefaultTokenServices tokenServices = new DefaultTokenServices();
        tokenServices.setTokenStore(tokenStore);
        return tokenServices;
    }

    @Bean
    public TokenStore tokenStore() {
        if (tokenStore == null) {
            tokenStore = new JwtTokenStore(jwtAccessTokenConverter());
        }
        return tokenStore;
    }

    @Bean
    public JwtAccessTokenConverter jwtAccessTokenConverter() {
        JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
        converter.setVerifierKey(getPublicKeyAsString());
        return converter;
    }

    private String getPublicKeyAsString() {
        try {
            return IOUtils.toString(securityProperties.getJwt().getPublicKey().getInputStream(), UTF_8);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

}

curl -X POST http://localhost:8081/oauth/token   -H 'Cache-Control: no-cache' -H 'Content-Type: application/x-www-form-urlencoded' -d 'grant_type=password&pass=123&username=user'
curl -X POST http://localhost:8089/oauth/token   -H 'Cache-Control: no-cache' -H 'Content-Type: application/x-www-form-urlencoded' -d 'grant_type=password&pass=123&username=user'

curl -u clientId:secret -X POST localhost:8089/oauth/token  -d 'grant_type=password&username=user&password=pass'

curl -u clientId:secret -X POST localhost:8089/oauth/token\?grant_type=password\&username=user\&password=pass

curl -u clientId:secret -X POST localhost:8081/oauth/token\?grant_type=password\&username=user\&password=pass

curl -X POST localhost:8081/oauth/token\?grant_type=password\&username=user\&password=pass

curl -u clientId:secret -X POST http://localhost:8081/oauth/token   -H 'Cache-Control: no-cache' -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=user&password=pass'




curl localhost:8089/resource/me -H "Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MTI5MTM4NTEsInVzZXJfbmFtZSI6InVzZXIiLCJhdXRob3JpdGllcyI6WyJST0xFX1VTRVIiXSwianRpIjoiYzZmYmM4YTctMmRjZi00NjRlLWE5MDItNTg1MDJjMWU5OTNiIiwiY2xpZW50X2lkIjoiY2xpZW50SWQiLCJzY29wZSI6WyJyZWFkIiwid3JpdGUiXX0.XoyVzk2hstds6xZzLdTwv8ciewj5qX0tC5hnqHVOTG6P3_vSLyo3dPN00iqDB0A9ozaL4Lp2bra1RXkuPmz69ylnx51cgdboyY2I9bS4qhGi-x7UiBG6yfOw6HbRiXqp1TuH9VprvFU68zEZZFMfsvQrLXs-5dQdfbAGfK1RF4y6VDfXWtVheXMl__yIDs8lAfu5ik8Jdjchcpm-iLptIy-p1MOmGGofXtqxywGSYWU7mCkFwJ7nLb8ikbsyxSSk8sJGhqtA5SArvui4Balpf1H8jo-IEdhB9-5VWgUzcmFunGb1TXShIJ28hZF9bn0hXXwTCeZYpCsA-7zs-pSbmg"